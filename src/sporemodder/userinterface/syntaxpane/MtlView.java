package sporemodder.userinterface.syntaxpane;

import java.awt.Color;
import java.util.HashMap;
import java.util.regex.Pattern;

import javax.swing.text.Element;
import javax.swing.text.StyledEditorKit;
import javax.swing.text.View;
import javax.swing.text.ViewFactory;

import sporemodder.userinterface.fileview.TextFileView;

public class MtlView extends HighlightedView {
	/**
	 * Thanks: http://groups.google.com/group/de.comp.lang.java/msg/2bbeb016abad270
	 * 
	 * IMPORTANT NOTE: regex should contain 1 group.
	 * 
	 * Using PlainView here because we don't want line wrapping to occur.
	 * 
	 * @author kees
	 * @date 13-jan-2006
	 *
	 */
	private static HashMap<Pattern, Color> patternColors;
	private static final String[] TAGS_SPECIAL = new String[] { "exportMaterial" };
	private static final String[] TAGS_BLOCKS = new String[] {"material", "shaderConst", "textureSlot", "end"};
	private static final String[] TAGS_OPTIONS = new String[] {"alpha", "stageStates", "samplerStates", "materials", "textures"};
	private static final String[] TAGS_COMMANDS = new String[] {"materialID", "primitiveType", "materialColor", "ambientColor", "renderState",
			"name", "bool", "short", "char", "int", "float", "samplerState", "stageState"};
	private static final String[] TAGS_ENUMS = new String[] {
			"FALSE", "TRUE", "D3DRS_ZENABLE", "D3DRS_FILLMODE", "D3DRS_SHADEMODE", "D3DRS_ZWRITEENABLE", "D3DRS_ALPHATESTENABLE", "D3DRS_LASTPIXEL",
			"D3DRS_SRCBLEND", "D3DRS_DESTBLEND", "D3DRS_CULLMODE", "D3DRS_ZFUNC", "D3DRS_ALPHAREF", "D3DRS_ALPHAFUNC", "D3DRS_DITHERENABLE", 
			"D3DRS_ALPHABLENDENABLE", "D3DRS_FOGENABLE", "D3DRS_SPECULARENABLE", "D3DRS_FOGCOLOR", "D3DRS_FOGTABLEMODE", "D3DRS_FOGSTART", 
			"D3DRS_FOGEND", "D3DRS_FOGDENSITY", "D3DRS_RANGEFOGENABLE", "D3DRS_STENCILENABLE", "D3DRS_STENCILFAIL", "D3DRS_STENCILZFAIL", 
			"D3DRS_STENCILPASS", "D3DRS_STENCILFUNC", "D3DRS_STENCILREF", "D3DRS_STENCILMASK", "D3DRS_STENCILWRITEMASK", "D3DRS_TEXTUREFACTOR", 
			"D3DRS_WRAP0", "D3DRS_WRAP1", "D3DRS_WRAP2", "D3DRS_WRAP3", "D3DRS_WRAP4", "D3DRS_WRAP5", "D3DRS_WRAP6", "D3DRS_WRAP7", "D3DRS_CLIPPING", 
			"D3DRS_LIGHTING", "D3DRS_AMBIENT", "D3DRS_FOGVERTEXMODE", "D3DRS_COLORVERTEX", "D3DRS_LOCALVIEWER", "D3DRS_NORMALIZENORMALS", 
			"D3DRS_DIFFUSEMATERIALSOURCE", "D3DRS_SPECULARMATERIALSOURCE", "D3DRS_AMBIENTMATERIALSOURCE", "D3DRS_EMISSIVEMATERIALSOURCE", 
			"D3DRS_VERTEXBLEND", "D3DRS_CLIPPLANEENABLE", "D3DRS_POINTSIZE", "D3DRS_POINTSIZE_MIN", "D3DRS_POINTSPRITEENABLE", "D3DRS_POINTSCALEENABLE", 
			"D3DRS_POINTSCALE_A", "D3DRS_POINTSCALE_B", "D3DRS_POINTSCALE_C", "D3DRS_MULTISAMPLEANTIALIAS", "D3DRS_MULTISAMPLEMASK", "D3DRS_PATCHEDGESTYLE", 
			"D3DRS_DEBUGMONITORTOKEN", "D3DRS_POINTSIZE_MAX", "D3DRS_INDEXEDVERTEXBLENDENABLE", "D3DRS_COLORWRITEENABLE", "D3DRS_TWEENFACTOR", "D3DRS_BLENDOP",
			"D3DRS_POSITIONDEGREE", "D3DRS_NORMALDEGREE", "D3DRS_SCISSORTESTENABLE", "D3DRS_SLOPESCALEDEPTHBIAS", "D3DRS_ANTIALIASEDLINEENABLE",
			"D3DRS_MINTESSELLATIONLEVEL", "D3DRS_MAXTESSELLATIONLEVEL", "D3DRS_ADAPTIVETESS_X", "D3DRS_ADAPTIVETESS_Y", "D3DRS_ADAPTIVETESS_Z", 
			"D3DRS_ADAPTIVETESS_W", "D3DRS_ENABLEADAPTIVETESSELLATION", "D3DRS_TWOSIDEDSTENCILMODE", "D3DRS_CCW_STENCILFAIL", "D3DRS_CCW_STENCILZFAIL",
			"D3DRS_CCW_STENCILPASS", "D3DRS_CCW_STENCILFUNC", "D3DRS_COLORWRITEENABLE1", "D3DRS_COLORWRITEENABLE2", "D3DRS_COLORWRITEENABLE3", 
			"D3DRS_BLENDFACTOR", "D3DRS_SRGBWRITEENABLE", "D3DRS_DEPTHBIAS", "D3DRS_WRAP8", "D3DRS_WRAP9", "D3DRS_WRAP10", "D3DRS_WRAP11", "D3DRS_WRAP12", 
			"D3DRS_WRAP13", "D3DRS_WRAP14", "D3DRS_WRAP15", "D3DRS_SEPARATEALPHABLENDENABLE", "D3DRS_SRCBLENDALPHA", "D3DRS_DESTBLENDALPHA", 
			"D3DRS_BLENDOPALPHA", "D3DRS_FORCE_DWORD", "D3DZB_FALSE", "D3DZB_TRUE", "D3DZB_USEW", "D3DZB_FORCE_DWORD", "D3DFILL_POINT", "D3DFILL_WIREFRAME", 
			"D3DFILL_SOLID", "D3DFILL_FORCE_DWORD", "D3DSHADE_FLAT", "D3DSHADE_GOURAUD", "D3DSHADE_PHONG", "D3DSHADE_FORCE_DWORD", "D3DBLEND_ZERO", "D3DBLEND_ONE", 
			"D3DBLEND_SRCCOLOR", "D3DBLEND_INVSRCCOLOR", "D3DBLEND_SRCALPHA", "D3DBLEND_INVSRCALPHA", "D3DBLEND_DESTALPHA", "D3DBLEND_INVDESTALPHA", 
			"D3DBLEND_DESTCOLOR", "D3DBLEND_INVDESTCOLOR", "D3DBLEND_SRCALPHASAT", "D3DBLEND_BOTHSRCALPHA", "D3DBLEND_BOTHINVSRCALPHA", "D3DBLEND_BLENDFACTOR", 
			"D3DBLEND_INVBLENDFACTOR", "D3DBLEND_SRCCOLOR2", "D3DBLEND_INVSRCCOLOR2", "D3DBLEND_FORCE_DWORD", "D3DCULL_NONE", "D3DCULL_CW", "D3DCULL_CCW", 
			"D3DCULL_FORCE_DWORD", "D3DCMP_NEVER", "D3DCMP_LESS", "D3DCMP_EQUAL", "D3DCMP_LESSEQUAL", "D3DCMP_GREATER", "D3DCMP_NOTEQUAL", "D3DCMP_GREATEREQUAL", 
			"D3DCMP_ALWAYS", "D3DCMP_FORCE_DWORD", "D3DFOG_NONE", "D3DFOG_EXP", "D3DFOG_EXP2", "D3DFOG_LINEAR", "D3DFOG_FORCE_DWORD", "D3DSTENCILOP_KEEP", 
			"D3DSTENCILOP_ZERO", "D3DSTENCILOP_REPLACE", "D3DSTENCILOP_INCRSAT", "D3DSTENCILOP_DECRSAT", "D3DSTENCILOP_INVERT", "D3DSTENCILOP_INCR", "D3DSTENCILOP_DECR", 
			"D3DSTENCILOP_FORCE_DWORD", "D3DMCS_MATERIAL", "D3DMCS_COLOR1", "D3DMCS_COLOR2", "D3DMCS_FORCE_DWORD", "D3DVBF_DISABLE", "D3DVBF_1WEIGHTS", "D3DVBF_2WEIGHTS", 
			"D3DVBF_3WEIGHTS", "D3DVBF_TWEENING", "D3DVBF_0WEIGHTS", "D3DPATCHEDGE_DISCRETE", "D3DPATCHEDGE_CONTINUOUS", "D3DPATCHEDGE_FORCE_DWORD", "D3DDMT_ENABLE", 
			"D3DDMT_DISABLE", "D3DDMT_FORCE_DWORD", "D3DDEGREE_LINEAR", "D3DDEGREE_QUADRATIC", "D3DDEGREE_CUBIC", "D3DDEGREE_QUINTIC", "D3DCULL_FORCE_DWORD", 
			"D3DBLENDOP_ADD", "D3DBLENDOP_SUBTRACT", "D3DBLENDOP_REVSUBTRACT", "D3DBLENDOP_MIN", "D3DBLENDOP_MAX", "D3DBLENDOP_FORCE_DWORD", "D3DSAMP_ADDRESSU", 
			"D3DSAMP_ADDRESSV", "D3DSAMP_ADDRESSW", "D3DSAMP_BORDERCOLOR", "D3DSAMP_MAGFILTER", "D3DSAMP_MINFILTER", "D3DSAMP_MIPFILTER", "D3DSAMP_MIPMAPLODBIAS", 
			"D3DSAMP_MAXMIPLEVEL", "D3DSAMP_MAXANISOTROPY", "D3DSAMP_SRGBTEXTURE", "D3DSAMP_ELEMENTINDEX", "D3DSAMP_DMAPOFFSET", "D3DSAMP_FORCE_DWORD", "D3DTADDRESS_WRAP",
			"D3DTADDRESS_MIRROR", "D3DTADDRESS_CLAMP", "D3DTADDRESS_BORDER", "D3DTADDRESS_MIRRORONCE", "D3DTADDRESS_FORCE_DWORD", "D3DTEXF_NONE", "D3DTEXF_POINT", 
			"D3DTEXF_LINEAR", "D3DTEXF_ANISOTROPIC", "D3DTEXF_PYRAMIDALQUAD", "D3DTEXF_GAUSSIANQUAD", "D3DTEXF_CONVOLUTIONMONO", "D3DTEXF_FORCE_DWORD", "D3DTSS_COLOROP", 
			"D3DTSS_COLORARG1", "D3DTSS_COLORARG2", "D3DTSS_ALPHAOP", "D3DTSS_ALPHAARG1", "D3DTSS_ALPHAARG2", "D3DTSS_BUMPENVMAT00", "D3DTSS_BUMPENVMAT01", 
			"D3DTSS_BUMPENVMAT10", "D3DTSS_BUMPENVMAT11", "D3DTSS_TEXCOORDINDEX", "D3DTSS_BUMPENVLSCALE", "D3DTSS_BUMPENVLOFFSET", "D3DTSS_TEXTURETRANSFORMFLAGS", 
			"D3DTSS_COLORARG0", "D3DTSS_ALPHAARG0", "D3DTSS_RESULTARG", "D3DTSS_CONSTANT", "D3DTSS_FORCE_DWORD", "D3DTOP_DISABLE", "D3DTOP_SELECTARG1", "D3DTOP_SELECTARG2", 
			"D3DTOP_MODULATE", "D3DTOP_MODULATE2X", "D3DTOP_MODULATE4X", "D3DTOP_ADD", "D3DTOP_ADDSIGNED", "D3DTOP_ADDSIGNED2X", "D3DTOP_SUBTRACT", "D3DTOP_ADDSMOOTH",
			"D3DTOP_BLENDDIFFUSEALPHA", "D3DTOP_BLENDTEXTUREALPHA", "D3DTOP_BLENDFACTORALPHA", "D3DTOP_BLENDTEXTUREALPHAPM", "D3DTOP_BLENDCURRENTALPHA", "D3DTOP_PREMODULATE", 
			"D3DTOP_MODULATEALPHA_ADDCOLOR", "D3DTOP_MODULATECOLOR_ADDALPHA", "D3DTOP_MODULATEINVALPHA_ADDCOLOR", "D3DTOP_MODULATEINVCOLOR_ADDALPHA", "D3DTOP_BUMPENVMAP",
			"D3DTOP_BUMPENVMAPLUMINANCE", "D3DTOP_DOTPRODUCT3", "D3DTOP_MULTIPLYADD", "D3DTOP_LERP", "D3DTOP_FORCE_DWORD", "D3DPT_POINTLIST", "D3DPT_LINELIST", "D3DPT_LINESTRIP",
			"D3DPT_TRIANGLELIST", "D3DPT_TRIANGLESTRIP", "D3DPT_TRIANGLEFAN", "D3DPT_FORCE_DWORD"};
	
	private static final Color COLOR_SPECIAL = new Color(193, 144, 212);
	private static final Color COLOR_BLOCKS = new Color(176, 176, 0);
	private static final Color COLOR_COMMANDS = new Color(128, 128, 64);
	private static final Color COLOR_ENUMS = new Color(255, 128, 0);
	private static final Color COLOR_OPTIONS = new Color(128, 0, 0);
	
	static {
	    // NOTE: the order is important!
	    patternColors = new HashMap<Pattern, Color>();
	    
	    for (String s : TAGS_ENUMS) {
	    	patternColors.put(Pattern.compile("\\s+(" + s + ")\\s+"), COLOR_ENUMS);
	    }
	    for (String s : TAGS_COMMANDS) {
	    	patternColors.put(Pattern.compile("^\\s+(" + s + ")\\s+"), COLOR_COMMANDS);
	    }
	    for (String s : TAGS_BLOCKS) {
	    	patternColors.put(Pattern.compile("^\\s*(" + s + ")\\s+"), COLOR_BLOCKS);
	    }
	    for (String s : TAGS_SPECIAL) {
	    	patternColors.put(Pattern.compile("^(" + s + ")\\s+"), COLOR_SPECIAL);
	    }
	    for (String s : TAGS_OPTIONS) {
	    	patternColors.put(Pattern.compile("\\s+(-" + s + ")\\s+"), COLOR_OPTIONS);
	    }
	}
	
	
	public MtlView(Element arg0, TextFileView textFileView) {
		super(arg0, textFileView, patternColors);
	}

	
	public static class MtlViewFactory implements ViewFactory {

		private TextFileView textFileView;
		public MtlViewFactory(TextFileView textFileView) {
			this.textFileView = textFileView;
		}
		
		@Override
		public View create(Element arg0) {
			return new MtlView(arg0, textFileView);
		}
		
	}
	
	public static class MtlEditorKit extends StyledEditorKit {
	
		private ViewFactory mtlViewFactory;
		
		public MtlEditorKit(TextFileView textFileView) {
			mtlViewFactory = new MtlViewFactory(textFileView);
		}
		
		@Override
		public ViewFactory getViewFactory() {
			return mtlViewFactory;
		}
		
		@Override
		public String getContentType() {
			return "text/mtl";
		}
	}
}
